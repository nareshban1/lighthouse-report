name: Lighthouse Desktop CI

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize]

jobs:
  build-lighthouse-desktop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: pnpm/action-setup@v4

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Installing Dependencies
        run: pnpm install

      - name: Build Web Project
        run: pnpm run build

      - name: Install Lighthouse CI
        run: |
          cd apps/web
          pnpm install -g @lhci/cli

      - name: Lighthouse on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6

        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.LHCI_SERVER_BASE_URL }}
        with:
          script: |
            process.chdir('apps/web');
            const lighthouseConfig = require('./lighthouserc.cjs');
            // Healthcheck
            await exec.exec('lhci', ['healthcheck', '--fatal']);
            // Desktop
            for await (const url of lighthouseConfig.ci.collect.url) {
                await exec.exec('lhci', ['collect', '--additive', '--url', url, '--settings.preset', 'desktop']);
                
            };
            await exec.exec('lhci', ['assert','--preset','lighthouse:recommended' ]);
            await exec.exec('lhci', ['upload','--target', 'temporary-public-storage', '--githubStatusContextSuffix', '/desktop']);
            // Cleanup
            await exec.exec('rm', ['-fr', '.lighthouseci']);

      - name: Slack Notification on SUCCESS
        if: success()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: Lighthouse Test has Passed on desktop.
          attachments: |
            [
              {
                "color": "good",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Lighthouse Results URL",
                    "value": ""
                  }
                ]
              }
            ]

      - name: Slack Notification on FAILURE
        if: failure()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: Lighthouse Test has Failed on desktop.
          attachments: |
            [
              {
                "color": "danger",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Lighthouse Results URL",
                    "value": ""
                  }
                ]
              }
            ]
